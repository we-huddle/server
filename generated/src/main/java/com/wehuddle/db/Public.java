/*
 * This file is generated by jOOQ.
 */
package com.wehuddle.db;


import com.wehuddle.db.tables.Answer;
import com.wehuddle.db.tables.Badge;
import com.wehuddle.db.tables.BadgeAchievement;
import com.wehuddle.db.tables.FeedEvent;
import com.wehuddle.db.tables.FlywaySchemaHistory;
import com.wehuddle.db.tables.Issue;
import com.wehuddle.db.tables.IssueAssignment;
import com.wehuddle.db.tables.Notification;
import com.wehuddle.db.tables.Profile;
import com.wehuddle.db.tables.PullRequest;
import com.wehuddle.db.tables.Session;
import com.wehuddle.db.tables.Sprint;
import com.wehuddle.db.tables.SprintIssue;
import com.wehuddle.db.tables.Task;
import com.wehuddle.db.tables.UserFollower;

import java.util.Arrays;
import java.util.List;

import org.jooq.Catalog;
import org.jooq.Sequence;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Public extends SchemaImpl {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public</code>
     */
    public static final Public PUBLIC = new Public();

    /**
     * The table <code>public.answer</code>.
     */
    public final Answer ANSWER = Answer.ANSWER;

    /**
     * The table <code>public.badge</code>.
     */
    public final Badge BADGE = Badge.BADGE;

    /**
     * The table <code>public.badge_achievement</code>.
     */
    public final BadgeAchievement BADGE_ACHIEVEMENT = BadgeAchievement.BADGE_ACHIEVEMENT;

    /**
     * The table <code>public.feed_event</code>.
     */
    public final FeedEvent FEED_EVENT = FeedEvent.FEED_EVENT;

    /**
     * The table <code>public.flyway_schema_history</code>.
     */
    public final FlywaySchemaHistory FLYWAY_SCHEMA_HISTORY = FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY;

    /**
     * The table <code>public.issue</code>.
     */
    public final Issue ISSUE = Issue.ISSUE;

    /**
     * The table <code>public.issue_assignment</code>.
     */
    public final IssueAssignment ISSUE_ASSIGNMENT = IssueAssignment.ISSUE_ASSIGNMENT;

    /**
     * The table <code>public.notification</code>.
     */
    public final Notification NOTIFICATION = Notification.NOTIFICATION;

    /**
     * The table <code>public.profile</code>.
     */
    public final Profile PROFILE = Profile.PROFILE;

    /**
     * The table <code>public.pull_request</code>.
     */
    public final PullRequest PULL_REQUEST = PullRequest.PULL_REQUEST;

    /**
     * The table <code>public.session</code>.
     */
    public final Session SESSION = Session.SESSION;

    /**
     * The table <code>public.sprint</code>.
     */
    public final Sprint SPRINT = Sprint.SPRINT;

    /**
     * The table <code>public.sprint_issue</code>.
     */
    public final SprintIssue SPRINT_ISSUE = SprintIssue.SPRINT_ISSUE;

    /**
     * The table <code>public.task</code>.
     */
    public final Task TASK = Task.TASK;

    /**
     * The table <code>public.user_follower</code>.
     */
    public final UserFollower USER_FOLLOWER = UserFollower.USER_FOLLOWER;

    /**
     * No further instances allowed
     */
    private Public() {
        super("public", null);
    }


    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Sequence<?>> getSequences() {
        return Arrays.<Sequence<?>>asList(
            Sequences.SPRINT_NUMBER_SEQ);
    }

    @Override
    public final List<Table<?>> getTables() {
        return Arrays.<Table<?>>asList(
            Answer.ANSWER,
            Badge.BADGE,
            BadgeAchievement.BADGE_ACHIEVEMENT,
            FeedEvent.FEED_EVENT,
            FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY,
            Issue.ISSUE,
            IssueAssignment.ISSUE_ASSIGNMENT,
            Notification.NOTIFICATION,
            Profile.PROFILE,
            PullRequest.PULL_REQUEST,
            Session.SESSION,
            Sprint.SPRINT,
            SprintIssue.SPRINT_ISSUE,
            Task.TASK,
            UserFollower.USER_FOLLOWER);
    }
}
