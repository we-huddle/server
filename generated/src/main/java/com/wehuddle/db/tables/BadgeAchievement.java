/*
 * This file is generated by jOOQ.
 */
package com.wehuddle.db.tables;


import com.wehuddle.db.Keys;
import com.wehuddle.db.Public;
import com.wehuddle.db.tables.records.BadgeAchievementRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BadgeAchievement extends TableImpl<BadgeAchievementRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.badge_achievement</code>
     */
    public static final BadgeAchievement BADGE_ACHIEVEMENT = new BadgeAchievement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BadgeAchievementRecord> getRecordType() {
        return BadgeAchievementRecord.class;
    }

    /**
     * The column <code>public.badge_achievement.id</code>.
     */
    public final TableField<BadgeAchievementRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.badge_achievement.profileid</code>.
     */
    public final TableField<BadgeAchievementRecord, UUID> PROFILEID = createField(DSL.name("profileid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.badge_achievement.badgeid</code>.
     */
    public final TableField<BadgeAchievementRecord, UUID> BADGEID = createField(DSL.name("badgeid"), SQLDataType.UUID.nullable(false), this, "");

    private BadgeAchievement(Name alias, Table<BadgeAchievementRecord> aliased) {
        this(alias, aliased, null);
    }

    private BadgeAchievement(Name alias, Table<BadgeAchievementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.badge_achievement</code> table reference
     */
    public BadgeAchievement(String alias) {
        this(DSL.name(alias), BADGE_ACHIEVEMENT);
    }

    /**
     * Create an aliased <code>public.badge_achievement</code> table reference
     */
    public BadgeAchievement(Name alias) {
        this(alias, BADGE_ACHIEVEMENT);
    }

    /**
     * Create a <code>public.badge_achievement</code> table reference
     */
    public BadgeAchievement() {
        this(DSL.name("badge_achievement"), null);
    }

    public <O extends Record> BadgeAchievement(Table<O> child, ForeignKey<O, BadgeAchievementRecord> key) {
        super(child, key, BADGE_ACHIEVEMENT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<BadgeAchievementRecord> getPrimaryKey() {
        return Keys.BADGE_ACHIEVEMENT_PKEY;
    }

    @Override
    public List<UniqueKey<BadgeAchievementRecord>> getKeys() {
        return Arrays.<UniqueKey<BadgeAchievementRecord>>asList(Keys.BADGE_ACHIEVEMENT_PKEY);
    }

    @Override
    public List<ForeignKey<BadgeAchievementRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<BadgeAchievementRecord, ?>>asList(Keys.BADGE_ACHIEVEMENT__BADGE_ACHIEVEMENT_PROFILEID_FKEY, Keys.BADGE_ACHIEVEMENT__BADGE_ACHIEVEMENT_BADGEID_FKEY);
    }

    public Profile profile() {
        return new Profile(this, Keys.BADGE_ACHIEVEMENT__BADGE_ACHIEVEMENT_PROFILEID_FKEY);
    }

    public Badge badge() {
        return new Badge(this, Keys.BADGE_ACHIEVEMENT__BADGE_ACHIEVEMENT_BADGEID_FKEY);
    }

    @Override
    public BadgeAchievement as(String alias) {
        return new BadgeAchievement(DSL.name(alias), this);
    }

    @Override
    public BadgeAchievement as(Name alias) {
        return new BadgeAchievement(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BadgeAchievement rename(String name) {
        return new BadgeAchievement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BadgeAchievement rename(Name name) {
        return new BadgeAchievement(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, UUID, UUID> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
