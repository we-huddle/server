/*
 * This file is generated by jOOQ.
 */
package com.wehuddle.db.tables;


import com.wehuddle.db.Keys;
import com.wehuddle.db.Public;
import com.wehuddle.db.tables.records.UserFollowerRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserFollower extends TableImpl<UserFollowerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_follower</code>
     */
    public static final UserFollower USER_FOLLOWER = new UserFollower();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserFollowerRecord> getRecordType() {
        return UserFollowerRecord.class;
    }

    /**
     * The column <code>public.user_follower.id</code>.
     */
    public final TableField<UserFollowerRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.user_follower.profileid</code>.
     */
    public final TableField<UserFollowerRecord, UUID> PROFILEID = createField(DSL.name("profileid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.user_follower.follows</code>.
     */
    public final TableField<UserFollowerRecord, UUID> FOLLOWS = createField(DSL.name("follows"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.user_follower.created_at</code>.
     */
    public final TableField<UserFollowerRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.user_follower.updated_at</code>.
     */
    public final TableField<UserFollowerRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private UserFollower(Name alias, Table<UserFollowerRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserFollower(Name alias, Table<UserFollowerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_follower</code> table reference
     */
    public UserFollower(String alias) {
        this(DSL.name(alias), USER_FOLLOWER);
    }

    /**
     * Create an aliased <code>public.user_follower</code> table reference
     */
    public UserFollower(Name alias) {
        this(alias, USER_FOLLOWER);
    }

    /**
     * Create a <code>public.user_follower</code> table reference
     */
    public UserFollower() {
        this(DSL.name("user_follower"), null);
    }

    public <O extends Record> UserFollower(Table<O> child, ForeignKey<O, UserFollowerRecord> key) {
        super(child, key, USER_FOLLOWER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<UserFollowerRecord> getPrimaryKey() {
        return Keys.USER_FOLLOWER_PKEY;
    }

    @Override
    public List<UniqueKey<UserFollowerRecord>> getKeys() {
        return Arrays.<UniqueKey<UserFollowerRecord>>asList(Keys.USER_FOLLOWER_PKEY);
    }

    @Override
    public List<ForeignKey<UserFollowerRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserFollowerRecord, ?>>asList(Keys.USER_FOLLOWER__USER_FOLLOWER_PROFILEID_FKEY, Keys.USER_FOLLOWER__USER_FOLLOWER_FOLLOWS_FKEY);
    }

    public Profile userFollowerProfileidFkey() {
        return new Profile(this, Keys.USER_FOLLOWER__USER_FOLLOWER_PROFILEID_FKEY);
    }

    public Profile userFollowerFollowsFkey() {
        return new Profile(this, Keys.USER_FOLLOWER__USER_FOLLOWER_FOLLOWS_FKEY);
    }

    @Override
    public UserFollower as(String alias) {
        return new UserFollower(DSL.name(alias), this);
    }

    @Override
    public UserFollower as(Name alias) {
        return new UserFollower(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserFollower rename(String name) {
        return new UserFollower(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserFollower rename(Name name) {
        return new UserFollower(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, UUID, UUID, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
