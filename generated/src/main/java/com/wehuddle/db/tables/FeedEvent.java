/*
 * This file is generated by jOOQ.
 */
package com.wehuddle.db.tables;


import com.wehuddle.db.Keys;
import com.wehuddle.db.Public;
import com.wehuddle.db.enums.EventType;
import com.wehuddle.db.tables.records.FeedEventRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FeedEvent extends TableImpl<FeedEventRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.feed_event</code>
     */
    public static final FeedEvent FEED_EVENT = new FeedEvent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FeedEventRecord> getRecordType() {
        return FeedEventRecord.class;
    }

    /**
     * The column <code>public.feed_event.id</code>.
     */
    public final TableField<FeedEventRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.feed_event.profileid</code>.
     */
    public final TableField<FeedEventRecord, UUID> PROFILEID = createField(DSL.name("profileid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.feed_event.title</code>.
     */
    public final TableField<FeedEventRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.feed_event.type</code>.
     */
    public final TableField<FeedEventRecord, EventType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.wehuddle.db.enums.EventType.class), this, "");

    /**
     * The column <code>public.feed_event.referenceid</code>.
     */
    public final TableField<FeedEventRecord, UUID> REFERENCEID = createField(DSL.name("referenceid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.feed_event.created_at</code>.
     */
    public final TableField<FeedEventRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.feed_event.updated_at</code>.
     */
    public final TableField<FeedEventRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private FeedEvent(Name alias, Table<FeedEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private FeedEvent(Name alias, Table<FeedEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.feed_event</code> table reference
     */
    public FeedEvent(String alias) {
        this(DSL.name(alias), FEED_EVENT);
    }

    /**
     * Create an aliased <code>public.feed_event</code> table reference
     */
    public FeedEvent(Name alias) {
        this(alias, FEED_EVENT);
    }

    /**
     * Create a <code>public.feed_event</code> table reference
     */
    public FeedEvent() {
        this(DSL.name("feed_event"), null);
    }

    public <O extends Record> FeedEvent(Table<O> child, ForeignKey<O, FeedEventRecord> key) {
        super(child, key, FEED_EVENT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<FeedEventRecord> getPrimaryKey() {
        return Keys.FEED_EVENT_PKEY;
    }

    @Override
    public List<UniqueKey<FeedEventRecord>> getKeys() {
        return Arrays.<UniqueKey<FeedEventRecord>>asList(Keys.FEED_EVENT_PKEY);
    }

    @Override
    public List<ForeignKey<FeedEventRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FeedEventRecord, ?>>asList(Keys.FEED_EVENT__FEED_EVENT_PROFILEID_FKEY);
    }

    public Profile profile() {
        return new Profile(this, Keys.FEED_EVENT__FEED_EVENT_PROFILEID_FKEY);
    }

    @Override
    public FeedEvent as(String alias) {
        return new FeedEvent(DSL.name(alias), this);
    }

    @Override
    public FeedEvent as(Name alias) {
        return new FeedEvent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FeedEvent rename(String name) {
        return new FeedEvent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FeedEvent rename(Name name) {
        return new FeedEvent(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, UUID, String, EventType, UUID, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
