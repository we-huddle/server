/*
 * This file is generated by jOOQ.
 */
package com.wehuddle.db.tables;


import com.wehuddle.db.Keys;
import com.wehuddle.db.Public;
import com.wehuddle.db.tables.records.BadgeRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Badge extends TableImpl<BadgeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.badge</code>
     */
    public static final Badge BADGE = new Badge();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BadgeRecord> getRecordType() {
        return BadgeRecord.class;
    }

    /**
     * The column <code>public.badge.id</code>.
     */
    public final TableField<BadgeRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.badge.title</code>.
     */
    public final TableField<BadgeRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.badge.description</code>.
     */
    public final TableField<BadgeRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.badge.photo</code>.
     */
    public final TableField<BadgeRecord, String> PHOTO = createField(DSL.name("photo"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.badge.dep_badges</code>.
     */
    public final TableField<BadgeRecord, UUID[]> DEP_BADGES = createField(DSL.name("dep_badges"), SQLDataType.UUID.getArrayDataType(), this, "");

    /**
     * The column <code>public.badge.dep_tasks</code>.
     */
    public final TableField<BadgeRecord, UUID[]> DEP_TASKS = createField(DSL.name("dep_tasks"), SQLDataType.UUID.getArrayDataType(), this, "");

    private Badge(Name alias, Table<BadgeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Badge(Name alias, Table<BadgeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.badge</code> table reference
     */
    public Badge(String alias) {
        this(DSL.name(alias), BADGE);
    }

    /**
     * Create an aliased <code>public.badge</code> table reference
     */
    public Badge(Name alias) {
        this(alias, BADGE);
    }

    /**
     * Create a <code>public.badge</code> table reference
     */
    public Badge() {
        this(DSL.name("badge"), null);
    }

    public <O extends Record> Badge(Table<O> child, ForeignKey<O, BadgeRecord> key) {
        super(child, key, BADGE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<BadgeRecord> getPrimaryKey() {
        return Keys.BADGE_PKEY;
    }

    @Override
    public List<UniqueKey<BadgeRecord>> getKeys() {
        return Arrays.<UniqueKey<BadgeRecord>>asList(Keys.BADGE_PKEY);
    }

    @Override
    public Badge as(String alias) {
        return new Badge(DSL.name(alias), this);
    }

    @Override
    public Badge as(Name alias) {
        return new Badge(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Badge rename(String name) {
        return new Badge(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Badge rename(Name name) {
        return new Badge(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, String, String, String, UUID[], UUID[]> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
