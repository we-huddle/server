/*
 * This file is generated by jOOQ.
 */
package com.wehuddle.db.tables;


import com.wehuddle.db.Keys;
import com.wehuddle.db.Public;
import com.wehuddle.db.enums.PrState;
import com.wehuddle.db.tables.records.PullRequestRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PullRequest extends TableImpl<PullRequestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.pull_request</code>
     */
    public static final PullRequest PULL_REQUEST = new PullRequest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PullRequestRecord> getRecordType() {
        return PullRequestRecord.class;
    }

    /**
     * The column <code>public.pull_request.id</code>.
     */
    public final TableField<PullRequestRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.pull_request.github_pr_id</code>.
     */
    public final TableField<PullRequestRecord, Integer> GITHUB_PR_ID = createField(DSL.name("github_pr_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pull_request.profile_id</code>.
     */
    public final TableField<PullRequestRecord, UUID> PROFILE_ID = createField(DSL.name("profile_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.pull_request.title</code>.
     */
    public final TableField<PullRequestRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.pull_request.number</code>.
     */
    public final TableField<PullRequestRecord, Integer> NUMBER = createField(DSL.name("number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.pull_request.state</code>.
     */
    public final TableField<PullRequestRecord, PrState> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.wehuddle.db.enums.PrState.class), this, "");

    /**
     * The column <code>public.pull_request.url</code>.
     */
    public final TableField<PullRequestRecord, String> URL = createField(DSL.name("url"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.pull_request.merged</code>.
     */
    public final TableField<PullRequestRecord, Boolean> MERGED = createField(DSL.name("merged"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.pull_request.github_user</code>.
     */
    public final TableField<PullRequestRecord, JSONB> GITHUB_USER = createField(DSL.name("github_user"), SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>public.pull_request.assignees</code>.
     */
    public final TableField<PullRequestRecord, JSONB> ASSIGNEES = createField(DSL.name("assignees"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.pull_request.repo_name</code>.
     */
    public final TableField<PullRequestRecord, String> REPO_NAME = createField(DSL.name("repo_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.pull_request.repo_url</code>.
     */
    public final TableField<PullRequestRecord, String> REPO_URL = createField(DSL.name("repo_url"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.pull_request.opened_at</code>.
     */
    public final TableField<PullRequestRecord, OffsetDateTime> OPENED_AT = createField(DSL.name("opened_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private PullRequest(Name alias, Table<PullRequestRecord> aliased) {
        this(alias, aliased, null);
    }

    private PullRequest(Name alias, Table<PullRequestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.pull_request</code> table reference
     */
    public PullRequest(String alias) {
        this(DSL.name(alias), PULL_REQUEST);
    }

    /**
     * Create an aliased <code>public.pull_request</code> table reference
     */
    public PullRequest(Name alias) {
        this(alias, PULL_REQUEST);
    }

    /**
     * Create a <code>public.pull_request</code> table reference
     */
    public PullRequest() {
        this(DSL.name("pull_request"), null);
    }

    public <O extends Record> PullRequest(Table<O> child, ForeignKey<O, PullRequestRecord> key) {
        super(child, key, PULL_REQUEST);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<PullRequestRecord> getPrimaryKey() {
        return Keys.PULL_REQUEST_PKEY;
    }

    @Override
    public List<UniqueKey<PullRequestRecord>> getKeys() {
        return Arrays.<UniqueKey<PullRequestRecord>>asList(Keys.PULL_REQUEST_PKEY, Keys.PULL_REQUEST_GITHUB_PR_ID_KEY);
    }

    @Override
    public List<ForeignKey<PullRequestRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PullRequestRecord, ?>>asList(Keys.PULL_REQUEST__PULL_REQUEST_PROFILE_ID_FKEY);
    }

    public Profile profile() {
        return new Profile(this, Keys.PULL_REQUEST__PULL_REQUEST_PROFILE_ID_FKEY);
    }

    @Override
    public PullRequest as(String alias) {
        return new PullRequest(DSL.name(alias), this);
    }

    @Override
    public PullRequest as(Name alias) {
        return new PullRequest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PullRequest rename(String name) {
        return new PullRequest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PullRequest rename(Name name) {
        return new PullRequest(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<UUID, Integer, UUID, String, Integer, PrState, String, Boolean, JSONB, JSONB, String, String, OffsetDateTime> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
