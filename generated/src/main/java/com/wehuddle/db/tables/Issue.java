/*
 * This file is generated by jOOQ.
 */
package com.wehuddle.db.tables;


import com.wehuddle.db.Keys;
import com.wehuddle.db.Public;
import com.wehuddle.db.enums.IssueState;
import com.wehuddle.db.tables.records.IssueRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Issue extends TableImpl<IssueRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.issue</code>
     */
    public static final Issue ISSUE = new Issue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IssueRecord> getRecordType() {
        return IssueRecord.class;
    }

    /**
     * The column <code>public.issue.id</code>.
     */
    public final TableField<IssueRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.issue.github_issue_id</code>.
     */
    public final TableField<IssueRecord, Integer> GITHUB_ISSUE_ID = createField(DSL.name("github_issue_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.issue.title</code>.
     */
    public final TableField<IssueRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.issue.number</code>.
     */
    public final TableField<IssueRecord, Integer> NUMBER = createField(DSL.name("number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.issue.state</code>.
     */
    public final TableField<IssueRecord, IssueState> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.wehuddle.db.enums.IssueState.class), this, "");

    /**
     * The column <code>public.issue.url</code>.
     */
    public final TableField<IssueRecord, String> URL = createField(DSL.name("url"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.issue.github_user</code>.
     */
    public final TableField<IssueRecord, JSONB> GITHUB_USER = createField(DSL.name("github_user"), SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>public.issue.assignees</code>.
     */
    public final TableField<IssueRecord, JSONB> ASSIGNEES = createField(DSL.name("assignees"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.issue.repo_name</code>.
     */
    public final TableField<IssueRecord, String> REPO_NAME = createField(DSL.name("repo_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.issue.repo_url</code>.
     */
    public final TableField<IssueRecord, String> REPO_URL = createField(DSL.name("repo_url"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.issue.opened_at</code>.
     */
    public final TableField<IssueRecord, OffsetDateTime> OPENED_AT = createField(DSL.name("opened_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private Issue(Name alias, Table<IssueRecord> aliased) {
        this(alias, aliased, null);
    }

    private Issue(Name alias, Table<IssueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.issue</code> table reference
     */
    public Issue(String alias) {
        this(DSL.name(alias), ISSUE);
    }

    /**
     * Create an aliased <code>public.issue</code> table reference
     */
    public Issue(Name alias) {
        this(alias, ISSUE);
    }

    /**
     * Create a <code>public.issue</code> table reference
     */
    public Issue() {
        this(DSL.name("issue"), null);
    }

    public <O extends Record> Issue(Table<O> child, ForeignKey<O, IssueRecord> key) {
        super(child, key, ISSUE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<IssueRecord> getPrimaryKey() {
        return Keys.ISSUE_PKEY;
    }

    @Override
    public List<UniqueKey<IssueRecord>> getKeys() {
        return Arrays.<UniqueKey<IssueRecord>>asList(Keys.ISSUE_PKEY);
    }

    @Override
    public Issue as(String alias) {
        return new Issue(DSL.name(alias), this);
    }

    @Override
    public Issue as(Name alias) {
        return new Issue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Issue rename(String name) {
        return new Issue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Issue rename(Name name) {
        return new Issue(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<UUID, Integer, String, Integer, IssueState, String, JSONB, JSONB, String, String, OffsetDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
