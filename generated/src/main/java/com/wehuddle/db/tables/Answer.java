/*
 * This file is generated by jOOQ.
 */
package com.wehuddle.db.tables;


import com.wehuddle.db.Keys;
import com.wehuddle.db.Public;
import com.wehuddle.db.enums.AnswerStatus;
import com.wehuddle.db.tables.records.AnswerRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Answer extends TableImpl<AnswerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.answer</code>
     */
    public static final Answer ANSWER = new Answer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnswerRecord> getRecordType() {
        return AnswerRecord.class;
    }

    /**
     * The column <code>public.answer.id</code>.
     */
    public final TableField<AnswerRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.answer.profileid</code>.
     */
    public final TableField<AnswerRecord, UUID> PROFILEID = createField(DSL.name("profileid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.answer.taskid</code>.
     */
    public final TableField<AnswerRecord, UUID> TASKID = createField(DSL.name("taskid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.answer.status</code>.
     */
    public final TableField<AnswerRecord, AnswerStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.wehuddle.db.enums.AnswerStatus.class), this, "");

    /**
     * The column <code>public.answer.details</code>.
     */
    public final TableField<AnswerRecord, JSONB> DETAILS = createField(DSL.name("details"), SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>public.answer.created_at</code>.
     */
    public final TableField<AnswerRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.answer.updated_at</code>.
     */
    public final TableField<AnswerRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private Answer(Name alias, Table<AnswerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Answer(Name alias, Table<AnswerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.answer</code> table reference
     */
    public Answer(String alias) {
        this(DSL.name(alias), ANSWER);
    }

    /**
     * Create an aliased <code>public.answer</code> table reference
     */
    public Answer(Name alias) {
        this(alias, ANSWER);
    }

    /**
     * Create a <code>public.answer</code> table reference
     */
    public Answer() {
        this(DSL.name("answer"), null);
    }

    public <O extends Record> Answer(Table<O> child, ForeignKey<O, AnswerRecord> key) {
        super(child, key, ANSWER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<AnswerRecord> getPrimaryKey() {
        return Keys.ANSWER_PKEY;
    }

    @Override
    public List<UniqueKey<AnswerRecord>> getKeys() {
        return Arrays.<UniqueKey<AnswerRecord>>asList(Keys.ANSWER_PKEY);
    }

    @Override
    public List<ForeignKey<AnswerRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AnswerRecord, ?>>asList(Keys.ANSWER__ANSWER_PROFILEID_FKEY, Keys.ANSWER__ANSWER_TASKID_FKEY);
    }

    public Profile profile() {
        return new Profile(this, Keys.ANSWER__ANSWER_PROFILEID_FKEY);
    }

    public Task task() {
        return new Task(this, Keys.ANSWER__ANSWER_TASKID_FKEY);
    }

    @Override
    public Answer as(String alias) {
        return new Answer(DSL.name(alias), this);
    }

    @Override
    public Answer as(Name alias) {
        return new Answer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Answer rename(String name) {
        return new Answer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Answer rename(Name name) {
        return new Answer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, UUID, UUID, AnswerStatus, JSONB, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
