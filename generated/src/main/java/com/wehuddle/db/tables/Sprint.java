/*
 * This file is generated by jOOQ.
 */
package com.wehuddle.db.tables;


import com.wehuddle.db.Keys;
import com.wehuddle.db.Public;
import com.wehuddle.db.tables.records.SprintRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sprint extends TableImpl<SprintRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sprint</code>
     */
    public static final Sprint SPRINT = new Sprint();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SprintRecord> getRecordType() {
        return SprintRecord.class;
    }

    /**
     * The column <code>public.sprint.id</code>.
     */
    public final TableField<SprintRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.sprint.number</code>.
     */
    public final TableField<SprintRecord, Integer> NUMBER = createField(DSL.name("number"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.sprint.title</code>.
     */
    public final TableField<SprintRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.sprint.description</code>.
     */
    public final TableField<SprintRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.sprint.deadline</code>.
     */
    public final TableField<SprintRecord, OffsetDateTime> DEADLINE = createField(DSL.name("deadline"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.sprint.created_at</code>.
     */
    public final TableField<SprintRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.sprint.updated_at</code>.
     */
    public final TableField<SprintRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Sprint(Name alias, Table<SprintRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sprint(Name alias, Table<SprintRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.sprint</code> table reference
     */
    public Sprint(String alias) {
        this(DSL.name(alias), SPRINT);
    }

    /**
     * Create an aliased <code>public.sprint</code> table reference
     */
    public Sprint(Name alias) {
        this(alias, SPRINT);
    }

    /**
     * Create a <code>public.sprint</code> table reference
     */
    public Sprint() {
        this(DSL.name("sprint"), null);
    }

    public <O extends Record> Sprint(Table<O> child, ForeignKey<O, SprintRecord> key) {
        super(child, key, SPRINT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<SprintRecord, Integer> getIdentity() {
        return (Identity<SprintRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SprintRecord> getPrimaryKey() {
        return Keys.SPRINT_PKEY;
    }

    @Override
    public List<UniqueKey<SprintRecord>> getKeys() {
        return Arrays.<UniqueKey<SprintRecord>>asList(Keys.SPRINT_PKEY);
    }

    @Override
    public Sprint as(String alias) {
        return new Sprint(DSL.name(alias), this);
    }

    @Override
    public Sprint as(Name alias) {
        return new Sprint(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sprint rename(String name) {
        return new Sprint(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sprint rename(Name name) {
        return new Sprint(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, Integer, String, String, OffsetDateTime, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
